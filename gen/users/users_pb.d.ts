// @generated by protoc-gen-es v1.10.0 with parameter "target=ts+js+dts,import_extension=js,import_extension=ts json_types=true"
// @generated from file users/users.proto (package users, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum users.UserStatus
 */
export declare enum UserStatus {
  /**
   * @generated from enum value: USER_STATUS_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: USER_STATUS_OFFLINE = 1;
   */
  OFFLINE = 1,

  /**
   * @generated from enum value: USER_STATUS_BUSY = 2;
   */
  BUSY = 2,

  /**
   * @generated from enum value: USER_STATUS_AVAILABLE = 3;
   */
  AVAILABLE = 3,
}

/**
 * @generated from enum users.UserType
 */
export declare enum UserType {
  /**
   * @generated from enum value: USER_TYPE_USER = 0;
   */
  USER = 0,

  /**
   * @generated from enum value: USER_TYPE_SELLER = 1;
   */
  SELLER = 1,
}

/**
 * @generated from message users.Country
 */
export declare class Country extends Message<Country> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<Country>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.Country";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Country;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Country;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Country;

  static equals(a: Country | PlainMessage<Country> | undefined, b: Country | PlainMessage<Country> | undefined): boolean;
}

/**
 * @generated from message users.Province
 */
export declare class Province extends Message<Province> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: users.Country country = 3;
   */
  country?: Country;

  constructor(data?: PartialMessage<Province>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.Province";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Province;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Province;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Province;

  static equals(a: Province | PlainMessage<Province> | undefined, b: Province | PlainMessage<Province> | undefined): boolean;
}

/**
 * @generated from message users.City
 */
export declare class City extends Message<City> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: users.Province province = 3;
   */
  province?: Province;

  constructor(data?: PartialMessage<City>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.City";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): City;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): City;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): City;

  static equals(a: City | PlainMessage<City> | undefined, b: City | PlainMessage<City> | undefined): boolean;
}

/**
 * @generated from message users.Address
 */
export declare class Address extends Message<Address> {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * @generated from field: users.City city = 2;
   */
  city?: City;

  constructor(data?: PartialMessage<Address>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.Address";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Address;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Address;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Address;

  static equals(a: Address | PlainMessage<Address> | undefined, b: Address | PlainMessage<Address> | undefined): boolean;
}

/**
 * @generated from message users.User
 */
export declare class User extends Message<User> {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string username = 3;
   */
  username: string;

  /**
   * @generated from field: string password = 4;
   */
  password: string;

  /**
   * @generated from field: string email = 5;
   */
  email: string;

  /**
   * @generated from field: string phone = 6;
   */
  phone: string;

  /**
   * @generated from field: string code = 7;
   */
  code: string;

  /**
   * @generated from field: string sex = 8;
   */
  sex: string;

  /**
   * @generated from field: int32 age = 9;
   */
  age: number;

  /**
   * @generated from field: users.Address address = 10;
   */
  address?: Address;

  /**
   * @generated from field: users.UserStatus status = 11;
   */
  status: UserStatus;

  /**
   * @generated from field: users.UserType type = 12;
   */
  type: UserType;

  /**
   * @generated from field: repeated users.Role roles = 13;
   */
  roles: Role[];

  constructor(data?: PartialMessage<User>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.User";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User;

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean;
}

/**
 * @generated from message users.Action
 */
export declare class Action extends Message<Action> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<Action>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.Action";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action;

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean;
}

/**
 * @generated from message users.Role
 */
export declare class Role extends Message<Role> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated users.Action actions = 3;
   */
  actions: Action[];

  constructor(data?: PartialMessage<Role>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.Role";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role;

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean;
}

/**
 * @generated from message users.GetUserRequest
 */
export declare class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  constructor(data?: PartialMessage<GetUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.GetUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest;

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean;
}

/**
 * @generated from message users.UserResponse
 */
export declare class UserResponse extends Message<UserResponse> {
  /**
   * @generated from field: users.User user = 1;
   */
  user?: User;

  /**
   * @generated from field: users.Country usercountry = 2;
   */
  usercountry?: Country;

  /**
   * @generated from field: users.Province userprovince = 3;
   */
  userprovince?: Province;

  /**
   * @generated from field: repeated users.Action actions = 4;
   */
  actions: Action[];

  constructor(data?: PartialMessage<UserResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.UserResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserResponse;

  static equals(a: UserResponse | PlainMessage<UserResponse> | undefined, b: UserResponse | PlainMessage<UserResponse> | undefined): boolean;
}

/**
 * @generated from message users.LoginRequest
 */
export declare class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;

  constructor(data?: PartialMessage<LoginRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.LoginRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest;

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean;
}

